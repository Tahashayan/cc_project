Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt_list stmt
Rule 3     stmt_list -> stmt
Rule 4     stmt -> ID ASSIGN expr SEMICOLON
Rule 5     stmt -> IF LPAREN expr RPAREN stmt
Rule 6     stmt -> IF LPAREN expr RPAREN stmt ELSE stmt
Rule 7     stmt -> TYPE ID ASSIGN expr SEMICOLON
Rule 8     stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
Rule 9     case_list -> case_list case
Rule 10    case_list -> empty
Rule 11    case -> CASE NUMBER COLON stmt_list BREAK SEMICOLON
Rule 12    default_clause -> DEFAULT COLON stmt_list
Rule 13    default_clause -> empty
Rule 14    stmt -> BREAK SEMICOLON
Rule 15    empty -> <empty>
Rule 16    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 17    stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON
Rule 18    stmt -> LBRACE stmt_list RBRACE
Rule 19    stmt -> PRINT LPAREN expr RPAREN SEMICOLON
Rule 20    expr -> expr PLUS expr
Rule 21    expr -> expr MINUS expr
Rule 22    expr -> expr TIMES expr
Rule 23    expr -> expr DIVIDE expr
Rule 24    expr -> expr MOD expr
Rule 25    expr -> expr EQ expr
Rule 26    expr -> expr NEQ expr
Rule 27    expr -> expr LT expr
Rule 28    expr -> expr GT expr
Rule 29    expr -> expr LE expr
Rule 30    expr -> expr GE expr
Rule 31    expr -> expr AND expr
Rule 32    expr -> expr OR expr
Rule 33    expr -> LPAREN expr RPAREN
Rule 34    expr -> NUMBER
Rule 35    expr -> ID

Terminals, with rules where they appear

AND                  : 31
ASSIGN               : 4 7
BREAK                : 11 14
CASE                 : 11
COLON                : 11 12
DEFAULT              : 12
DIVIDE               : 23
DO                   : 17
ELSE                 : 6
EQ                   : 25
GE                   : 30
GT                   : 28
ID                   : 4 7 35
IF                   : 5 6
LBRACE               : 8 18
LE                   : 29
LPAREN               : 5 6 8 16 17 19 33
LT                   : 27
MINUS                : 21
MOD                  : 24
NEQ                  : 26
NUMBER               : 11 34
OR                   : 32
PLUS                 : 20
PRINT                : 19
RBRACE               : 8 18
RPAREN               : 5 6 8 16 17 19 33
SEMICOLON            : 4 7 11 14 17 19
SWITCH               : 8
TIMES                : 22
TYPE                 : 7
WHILE                : 16 17
error                : 

Nonterminals, with rules where they appear

case                 : 9
case_list            : 8 9
default_clause       : 8
empty                : 10 13
expr                 : 4 5 6 7 8 16 17 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33
program              : 0
stmt                 : 2 3 5 6 6 16 17
stmt_list            : 1 2 11 12 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt_list stmt
    (3) stmt_list -> . stmt
    (4) stmt -> . ID ASSIGN expr SEMICOLON
    (5) stmt -> . IF LPAREN expr RPAREN stmt
    (6) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (7) stmt -> . TYPE ID ASSIGN expr SEMICOLON
    (8) stmt -> . SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
    (14) stmt -> . BREAK SEMICOLON
    (16) stmt -> . WHILE LPAREN expr RPAREN stmt
    (17) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMICOLON
    (18) stmt -> . LBRACE stmt_list RBRACE
    (19) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON

    ID              shift and go to state 4
    IF              shift and go to state 5
    TYPE            shift and go to state 6
    SWITCH          shift and go to state 7
    BREAK           shift and go to state 9
    WHILE           shift and go to state 10
    DO              shift and go to state 11
    LBRACE          shift and go to state 8
    PRINT           shift and go to state 12

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    stmt                           shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (2) stmt_list -> stmt_list . stmt
    (4) stmt -> . ID ASSIGN expr SEMICOLON
    (5) stmt -> . IF LPAREN expr RPAREN stmt
    (6) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (7) stmt -> . TYPE ID ASSIGN expr SEMICOLON
    (8) stmt -> . SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
    (14) stmt -> . BREAK SEMICOLON
    (16) stmt -> . WHILE LPAREN expr RPAREN stmt
    (17) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMICOLON
    (18) stmt -> . LBRACE stmt_list RBRACE
    (19) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON

    $end            reduce using rule 1 (program -> stmt_list .)
    ID              shift and go to state 4
    IF              shift and go to state 5
    TYPE            shift and go to state 6
    SWITCH          shift and go to state 7
    BREAK           shift and go to state 9
    WHILE           shift and go to state 10
    DO              shift and go to state 11
    LBRACE          shift and go to state 8
    PRINT           shift and go to state 12

    stmt                           shift and go to state 13

state 3

    (3) stmt_list -> stmt .

    ID              reduce using rule 3 (stmt_list -> stmt .)
    IF              reduce using rule 3 (stmt_list -> stmt .)
    TYPE            reduce using rule 3 (stmt_list -> stmt .)
    SWITCH          reduce using rule 3 (stmt_list -> stmt .)
    BREAK           reduce using rule 3 (stmt_list -> stmt .)
    WHILE           reduce using rule 3 (stmt_list -> stmt .)
    DO              reduce using rule 3 (stmt_list -> stmt .)
    LBRACE          reduce using rule 3 (stmt_list -> stmt .)
    PRINT           reduce using rule 3 (stmt_list -> stmt .)
    $end            reduce using rule 3 (stmt_list -> stmt .)
    RBRACE          reduce using rule 3 (stmt_list -> stmt .)


state 4

    (4) stmt -> ID . ASSIGN expr SEMICOLON

    ASSIGN          shift and go to state 14


state 5

    (5) stmt -> IF . LPAREN expr RPAREN stmt
    (6) stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt

    LPAREN          shift and go to state 15


state 6

    (7) stmt -> TYPE . ID ASSIGN expr SEMICOLON

    ID              shift and go to state 16


state 7

    (8) stmt -> SWITCH . LPAREN expr RPAREN LBRACE case_list default_clause RBRACE

    LPAREN          shift and go to state 17


state 8

    (18) stmt -> LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt_list stmt
    (3) stmt_list -> . stmt
    (4) stmt -> . ID ASSIGN expr SEMICOLON
    (5) stmt -> . IF LPAREN expr RPAREN stmt
    (6) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (7) stmt -> . TYPE ID ASSIGN expr SEMICOLON
    (8) stmt -> . SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
    (14) stmt -> . BREAK SEMICOLON
    (16) stmt -> . WHILE LPAREN expr RPAREN stmt
    (17) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMICOLON
    (18) stmt -> . LBRACE stmt_list RBRACE
    (19) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON

    ID              shift and go to state 4
    IF              shift and go to state 5
    TYPE            shift and go to state 6
    SWITCH          shift and go to state 7
    BREAK           shift and go to state 9
    WHILE           shift and go to state 10
    DO              shift and go to state 11
    LBRACE          shift and go to state 8
    PRINT           shift and go to state 12

    stmt_list                      shift and go to state 18
    stmt                           shift and go to state 3

state 9

    (14) stmt -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 19


state 10

    (16) stmt -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 20


state 11

    (17) stmt -> DO . stmt WHILE LPAREN expr RPAREN SEMICOLON
    (4) stmt -> . ID ASSIGN expr SEMICOLON
    (5) stmt -> . IF LPAREN expr RPAREN stmt
    (6) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (7) stmt -> . TYPE ID ASSIGN expr SEMICOLON
    (8) stmt -> . SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
    (14) stmt -> . BREAK SEMICOLON
    (16) stmt -> . WHILE LPAREN expr RPAREN stmt
    (17) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMICOLON
    (18) stmt -> . LBRACE stmt_list RBRACE
    (19) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON

    ID              shift and go to state 4
    IF              shift and go to state 5
    TYPE            shift and go to state 6
    SWITCH          shift and go to state 7
    BREAK           shift and go to state 9
    WHILE           shift and go to state 10
    DO              shift and go to state 11
    LBRACE          shift and go to state 8
    PRINT           shift and go to state 12

    stmt                           shift and go to state 21

state 12

    (19) stmt -> PRINT . LPAREN expr RPAREN SEMICOLON

    LPAREN          shift and go to state 22


state 13

    (2) stmt_list -> stmt_list stmt .

    ID              reduce using rule 2 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 2 (stmt_list -> stmt_list stmt .)
    TYPE            reduce using rule 2 (stmt_list -> stmt_list stmt .)
    SWITCH          reduce using rule 2 (stmt_list -> stmt_list stmt .)
    BREAK           reduce using rule 2 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 2 (stmt_list -> stmt_list stmt .)
    DO              reduce using rule 2 (stmt_list -> stmt_list stmt .)
    LBRACE          reduce using rule 2 (stmt_list -> stmt_list stmt .)
    PRINT           reduce using rule 2 (stmt_list -> stmt_list stmt .)
    $end            reduce using rule 2 (stmt_list -> stmt_list stmt .)
    RBRACE          reduce using rule 2 (stmt_list -> stmt_list stmt .)


state 14

    (4) stmt -> ID ASSIGN . expr SEMICOLON
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 24

state 15

    (5) stmt -> IF LPAREN . expr RPAREN stmt
    (6) stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 27

state 16

    (7) stmt -> TYPE ID . ASSIGN expr SEMICOLON

    ASSIGN          shift and go to state 28


state 17

    (8) stmt -> SWITCH LPAREN . expr RPAREN LBRACE case_list default_clause RBRACE
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 29

state 18

    (18) stmt -> LBRACE stmt_list . RBRACE
    (2) stmt_list -> stmt_list . stmt
    (4) stmt -> . ID ASSIGN expr SEMICOLON
    (5) stmt -> . IF LPAREN expr RPAREN stmt
    (6) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (7) stmt -> . TYPE ID ASSIGN expr SEMICOLON
    (8) stmt -> . SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
    (14) stmt -> . BREAK SEMICOLON
    (16) stmt -> . WHILE LPAREN expr RPAREN stmt
    (17) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMICOLON
    (18) stmt -> . LBRACE stmt_list RBRACE
    (19) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON

    RBRACE          shift and go to state 30
    ID              shift and go to state 4
    IF              shift and go to state 5
    TYPE            shift and go to state 6
    SWITCH          shift and go to state 7
    BREAK           shift and go to state 9
    WHILE           shift and go to state 10
    DO              shift and go to state 11
    LBRACE          shift and go to state 8
    PRINT           shift and go to state 12

    stmt                           shift and go to state 13

state 19

    (14) stmt -> BREAK SEMICOLON .

    ID              reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    IF              reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    TYPE            reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    BREAK           reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    WHILE           reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    DO              reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    PRINT           reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    $end            reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    ELSE            reduce using rule 14 (stmt -> BREAK SEMICOLON .)


state 20

    (16) stmt -> WHILE LPAREN . expr RPAREN stmt
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 31

state 21

    (17) stmt -> DO stmt . WHILE LPAREN expr RPAREN SEMICOLON

    WHILE           shift and go to state 32


state 22

    (19) stmt -> PRINT LPAREN . expr RPAREN SEMICOLON
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 33

state 23

    (35) expr -> ID .

    SEMICOLON       reduce using rule 35 (expr -> ID .)
    PLUS            reduce using rule 35 (expr -> ID .)
    MINUS           reduce using rule 35 (expr -> ID .)
    TIMES           reduce using rule 35 (expr -> ID .)
    DIVIDE          reduce using rule 35 (expr -> ID .)
    MOD             reduce using rule 35 (expr -> ID .)
    EQ              reduce using rule 35 (expr -> ID .)
    NEQ             reduce using rule 35 (expr -> ID .)
    LT              reduce using rule 35 (expr -> ID .)
    GT              reduce using rule 35 (expr -> ID .)
    LE              reduce using rule 35 (expr -> ID .)
    GE              reduce using rule 35 (expr -> ID .)
    AND             reduce using rule 35 (expr -> ID .)
    OR              reduce using rule 35 (expr -> ID .)
    RPAREN          reduce using rule 35 (expr -> ID .)


state 24

    (4) stmt -> ID ASSIGN expr . SEMICOLON
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47


state 25

    (33) expr -> LPAREN . expr RPAREN
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 48

state 26

    (34) expr -> NUMBER .

    SEMICOLON       reduce using rule 34 (expr -> NUMBER .)
    PLUS            reduce using rule 34 (expr -> NUMBER .)
    MINUS           reduce using rule 34 (expr -> NUMBER .)
    TIMES           reduce using rule 34 (expr -> NUMBER .)
    DIVIDE          reduce using rule 34 (expr -> NUMBER .)
    MOD             reduce using rule 34 (expr -> NUMBER .)
    EQ              reduce using rule 34 (expr -> NUMBER .)
    NEQ             reduce using rule 34 (expr -> NUMBER .)
    LT              reduce using rule 34 (expr -> NUMBER .)
    GT              reduce using rule 34 (expr -> NUMBER .)
    LE              reduce using rule 34 (expr -> NUMBER .)
    GE              reduce using rule 34 (expr -> NUMBER .)
    AND             reduce using rule 34 (expr -> NUMBER .)
    OR              reduce using rule 34 (expr -> NUMBER .)
    RPAREN          reduce using rule 34 (expr -> NUMBER .)


state 27

    (5) stmt -> IF LPAREN expr . RPAREN stmt
    (6) stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    RPAREN          shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47


state 28

    (7) stmt -> TYPE ID ASSIGN . expr SEMICOLON
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 50

state 29

    (8) stmt -> SWITCH LPAREN expr . RPAREN LBRACE case_list default_clause RBRACE
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    RPAREN          shift and go to state 51
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47


state 30

    (18) stmt -> LBRACE stmt_list RBRACE .

    ID              reduce using rule 18 (stmt -> LBRACE stmt_list RBRACE .)
    IF              reduce using rule 18 (stmt -> LBRACE stmt_list RBRACE .)
    TYPE            reduce using rule 18 (stmt -> LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 18 (stmt -> LBRACE stmt_list RBRACE .)
    BREAK           reduce using rule 18 (stmt -> LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 18 (stmt -> LBRACE stmt_list RBRACE .)
    DO              reduce using rule 18 (stmt -> LBRACE stmt_list RBRACE .)
    LBRACE          reduce using rule 18 (stmt -> LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 18 (stmt -> LBRACE stmt_list RBRACE .)
    $end            reduce using rule 18 (stmt -> LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 18 (stmt -> LBRACE stmt_list RBRACE .)
    ELSE            reduce using rule 18 (stmt -> LBRACE stmt_list RBRACE .)


state 31

    (16) stmt -> WHILE LPAREN expr . RPAREN stmt
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    RPAREN          shift and go to state 52
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47


state 32

    (17) stmt -> DO stmt WHILE . LPAREN expr RPAREN SEMICOLON

    LPAREN          shift and go to state 53


state 33

    (19) stmt -> PRINT LPAREN expr . RPAREN SEMICOLON
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    RPAREN          shift and go to state 54
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47


state 34

    (4) stmt -> ID ASSIGN expr SEMICOLON .

    ID              reduce using rule 4 (stmt -> ID ASSIGN expr SEMICOLON .)
    IF              reduce using rule 4 (stmt -> ID ASSIGN expr SEMICOLON .)
    TYPE            reduce using rule 4 (stmt -> ID ASSIGN expr SEMICOLON .)
    SWITCH          reduce using rule 4 (stmt -> ID ASSIGN expr SEMICOLON .)
    BREAK           reduce using rule 4 (stmt -> ID ASSIGN expr SEMICOLON .)
    WHILE           reduce using rule 4 (stmt -> ID ASSIGN expr SEMICOLON .)
    DO              reduce using rule 4 (stmt -> ID ASSIGN expr SEMICOLON .)
    LBRACE          reduce using rule 4 (stmt -> ID ASSIGN expr SEMICOLON .)
    PRINT           reduce using rule 4 (stmt -> ID ASSIGN expr SEMICOLON .)
    $end            reduce using rule 4 (stmt -> ID ASSIGN expr SEMICOLON .)
    RBRACE          reduce using rule 4 (stmt -> ID ASSIGN expr SEMICOLON .)
    ELSE            reduce using rule 4 (stmt -> ID ASSIGN expr SEMICOLON .)


state 35

    (20) expr -> expr PLUS . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 55

state 36

    (21) expr -> expr MINUS . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 56

state 37

    (22) expr -> expr TIMES . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 57

state 38

    (23) expr -> expr DIVIDE . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 58

state 39

    (24) expr -> expr MOD . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 59

state 40

    (25) expr -> expr EQ . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 60

state 41

    (26) expr -> expr NEQ . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 61

state 42

    (27) expr -> expr LT . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 62

state 43

    (28) expr -> expr GT . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 63

state 44

    (29) expr -> expr LE . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 64

state 45

    (30) expr -> expr GE . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 65

state 46

    (31) expr -> expr AND . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 66

state 47

    (32) expr -> expr OR . expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 67

state 48

    (33) expr -> LPAREN expr . RPAREN
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    RPAREN          shift and go to state 68
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47


state 49

    (5) stmt -> IF LPAREN expr RPAREN . stmt
    (6) stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt
    (4) stmt -> . ID ASSIGN expr SEMICOLON
    (5) stmt -> . IF LPAREN expr RPAREN stmt
    (6) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (7) stmt -> . TYPE ID ASSIGN expr SEMICOLON
    (8) stmt -> . SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
    (14) stmt -> . BREAK SEMICOLON
    (16) stmt -> . WHILE LPAREN expr RPAREN stmt
    (17) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMICOLON
    (18) stmt -> . LBRACE stmt_list RBRACE
    (19) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON

    ID              shift and go to state 4
    IF              shift and go to state 5
    TYPE            shift and go to state 6
    SWITCH          shift and go to state 7
    BREAK           shift and go to state 9
    WHILE           shift and go to state 10
    DO              shift and go to state 11
    LBRACE          shift and go to state 8
    PRINT           shift and go to state 12

    stmt                           shift and go to state 69

state 50

    (7) stmt -> TYPE ID ASSIGN expr . SEMICOLON
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       shift and go to state 70
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47


state 51

    (8) stmt -> SWITCH LPAREN expr RPAREN . LBRACE case_list default_clause RBRACE

    LBRACE          shift and go to state 71


state 52

    (16) stmt -> WHILE LPAREN expr RPAREN . stmt
    (4) stmt -> . ID ASSIGN expr SEMICOLON
    (5) stmt -> . IF LPAREN expr RPAREN stmt
    (6) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (7) stmt -> . TYPE ID ASSIGN expr SEMICOLON
    (8) stmt -> . SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
    (14) stmt -> . BREAK SEMICOLON
    (16) stmt -> . WHILE LPAREN expr RPAREN stmt
    (17) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMICOLON
    (18) stmt -> . LBRACE stmt_list RBRACE
    (19) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON

    ID              shift and go to state 4
    IF              shift and go to state 5
    TYPE            shift and go to state 6
    SWITCH          shift and go to state 7
    BREAK           shift and go to state 9
    WHILE           shift and go to state 10
    DO              shift and go to state 11
    LBRACE          shift and go to state 8
    PRINT           shift and go to state 12

    stmt                           shift and go to state 72

state 53

    (17) stmt -> DO stmt WHILE LPAREN . expr RPAREN SEMICOLON
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr TIMES expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr MOD expr
    (25) expr -> . expr EQ expr
    (26) expr -> . expr NEQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr GT expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr AND expr
    (32) expr -> . expr OR expr
    (33) expr -> . LPAREN expr RPAREN
    (34) expr -> . NUMBER
    (35) expr -> . ID

    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 23

    expr                           shift and go to state 73

state 54

    (19) stmt -> PRINT LPAREN expr RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 74


state 55

    (20) expr -> expr PLUS expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 20 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 20 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 20 (expr -> expr PLUS expr .)
    EQ              reduce using rule 20 (expr -> expr PLUS expr .)
    NEQ             reduce using rule 20 (expr -> expr PLUS expr .)
    LT              reduce using rule 20 (expr -> expr PLUS expr .)
    GT              reduce using rule 20 (expr -> expr PLUS expr .)
    LE              reduce using rule 20 (expr -> expr PLUS expr .)
    GE              reduce using rule 20 (expr -> expr PLUS expr .)
    AND             reduce using rule 20 (expr -> expr PLUS expr .)
    OR              reduce using rule 20 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 20 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39

  ! TIMES           [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! AND             [ shift and go to state 46 ]
  ! OR              [ shift and go to state 47 ]


state 56

    (21) expr -> expr MINUS expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 21 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 21 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 21 (expr -> expr MINUS expr .)
    EQ              reduce using rule 21 (expr -> expr MINUS expr .)
    NEQ             reduce using rule 21 (expr -> expr MINUS expr .)
    LT              reduce using rule 21 (expr -> expr MINUS expr .)
    GT              reduce using rule 21 (expr -> expr MINUS expr .)
    LE              reduce using rule 21 (expr -> expr MINUS expr .)
    GE              reduce using rule 21 (expr -> expr MINUS expr .)
    AND             reduce using rule 21 (expr -> expr MINUS expr .)
    OR              reduce using rule 21 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 21 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39

  ! TIMES           [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! AND             [ shift and go to state 46 ]
  ! OR              [ shift and go to state 47 ]


state 57

    (22) expr -> expr TIMES expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 22 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 22 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 22 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 22 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 22 (expr -> expr TIMES expr .)
    MOD             reduce using rule 22 (expr -> expr TIMES expr .)
    EQ              reduce using rule 22 (expr -> expr TIMES expr .)
    NEQ             reduce using rule 22 (expr -> expr TIMES expr .)
    LT              reduce using rule 22 (expr -> expr TIMES expr .)
    GT              reduce using rule 22 (expr -> expr TIMES expr .)
    LE              reduce using rule 22 (expr -> expr TIMES expr .)
    GE              reduce using rule 22 (expr -> expr TIMES expr .)
    AND             reduce using rule 22 (expr -> expr TIMES expr .)
    OR              reduce using rule 22 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 22 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIVIDE          [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! AND             [ shift and go to state 46 ]
  ! OR              [ shift and go to state 47 ]


state 58

    (23) expr -> expr DIVIDE expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 23 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 23 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 23 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 23 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 23 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 23 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 23 (expr -> expr DIVIDE expr .)
    NEQ             reduce using rule 23 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 23 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 23 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 23 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 23 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 23 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 23 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 23 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIVIDE          [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! AND             [ shift and go to state 46 ]
  ! OR              [ shift and go to state 47 ]


state 59

    (24) expr -> expr MOD expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 24 (expr -> expr MOD expr .)
    PLUS            reduce using rule 24 (expr -> expr MOD expr .)
    MINUS           reduce using rule 24 (expr -> expr MOD expr .)
    TIMES           reduce using rule 24 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 24 (expr -> expr MOD expr .)
    MOD             reduce using rule 24 (expr -> expr MOD expr .)
    EQ              reduce using rule 24 (expr -> expr MOD expr .)
    NEQ             reduce using rule 24 (expr -> expr MOD expr .)
    LT              reduce using rule 24 (expr -> expr MOD expr .)
    GT              reduce using rule 24 (expr -> expr MOD expr .)
    LE              reduce using rule 24 (expr -> expr MOD expr .)
    GE              reduce using rule 24 (expr -> expr MOD expr .)
    AND             reduce using rule 24 (expr -> expr MOD expr .)
    OR              reduce using rule 24 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 24 (expr -> expr MOD expr .)

  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIVIDE          [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! AND             [ shift and go to state 46 ]
  ! OR              [ shift and go to state 47 ]


state 60

    (25) expr -> expr EQ expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 25 (expr -> expr EQ expr .)
    EQ              reduce using rule 25 (expr -> expr EQ expr .)
    NEQ             reduce using rule 25 (expr -> expr EQ expr .)
    AND             reduce using rule 25 (expr -> expr EQ expr .)
    OR              reduce using rule 25 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 25 (expr -> expr EQ expr .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45

  ! PLUS            [ reduce using rule 25 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 25 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 25 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 25 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 25 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 25 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 25 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 46 ]
  ! OR              [ shift and go to state 47 ]


state 61

    (26) expr -> expr NEQ expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 26 (expr -> expr NEQ expr .)
    EQ              reduce using rule 26 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 26 (expr -> expr NEQ expr .)
    AND             reduce using rule 26 (expr -> expr NEQ expr .)
    OR              reduce using rule 26 (expr -> expr NEQ expr .)
    RPAREN          reduce using rule 26 (expr -> expr NEQ expr .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45

  ! PLUS            [ reduce using rule 26 (expr -> expr NEQ expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr NEQ expr .) ]
  ! TIMES           [ reduce using rule 26 (expr -> expr NEQ expr .) ]
  ! DIVIDE          [ reduce using rule 26 (expr -> expr NEQ expr .) ]
  ! MOD             [ reduce using rule 26 (expr -> expr NEQ expr .) ]
  ! LT              [ reduce using rule 26 (expr -> expr NEQ expr .) ]
  ! GT              [ reduce using rule 26 (expr -> expr NEQ expr .) ]
  ! LE              [ reduce using rule 26 (expr -> expr NEQ expr .) ]
  ! GE              [ reduce using rule 26 (expr -> expr NEQ expr .) ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 46 ]
  ! OR              [ shift and go to state 47 ]


state 62

    (27) expr -> expr LT expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 27 (expr -> expr LT expr .)
    EQ              reduce using rule 27 (expr -> expr LT expr .)
    NEQ             reduce using rule 27 (expr -> expr LT expr .)
    LT              reduce using rule 27 (expr -> expr LT expr .)
    GT              reduce using rule 27 (expr -> expr LT expr .)
    LE              reduce using rule 27 (expr -> expr LT expr .)
    GE              reduce using rule 27 (expr -> expr LT expr .)
    AND             reduce using rule 27 (expr -> expr LT expr .)
    OR              reduce using rule 27 (expr -> expr LT expr .)
    RPAREN          reduce using rule 27 (expr -> expr LT expr .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39

  ! PLUS            [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! AND             [ shift and go to state 46 ]
  ! OR              [ shift and go to state 47 ]


state 63

    (28) expr -> expr GT expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 28 (expr -> expr GT expr .)
    EQ              reduce using rule 28 (expr -> expr GT expr .)
    NEQ             reduce using rule 28 (expr -> expr GT expr .)
    LT              reduce using rule 28 (expr -> expr GT expr .)
    GT              reduce using rule 28 (expr -> expr GT expr .)
    LE              reduce using rule 28 (expr -> expr GT expr .)
    GE              reduce using rule 28 (expr -> expr GT expr .)
    AND             reduce using rule 28 (expr -> expr GT expr .)
    OR              reduce using rule 28 (expr -> expr GT expr .)
    RPAREN          reduce using rule 28 (expr -> expr GT expr .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39

  ! PLUS            [ reduce using rule 28 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 28 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 28 (expr -> expr GT expr .) ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! AND             [ shift and go to state 46 ]
  ! OR              [ shift and go to state 47 ]


state 64

    (29) expr -> expr LE expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 29 (expr -> expr LE expr .)
    EQ              reduce using rule 29 (expr -> expr LE expr .)
    NEQ             reduce using rule 29 (expr -> expr LE expr .)
    LT              reduce using rule 29 (expr -> expr LE expr .)
    GT              reduce using rule 29 (expr -> expr LE expr .)
    LE              reduce using rule 29 (expr -> expr LE expr .)
    GE              reduce using rule 29 (expr -> expr LE expr .)
    AND             reduce using rule 29 (expr -> expr LE expr .)
    OR              reduce using rule 29 (expr -> expr LE expr .)
    RPAREN          reduce using rule 29 (expr -> expr LE expr .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39

  ! PLUS            [ reduce using rule 29 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 29 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 29 (expr -> expr LE expr .) ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! AND             [ shift and go to state 46 ]
  ! OR              [ shift and go to state 47 ]


state 65

    (30) expr -> expr GE expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 30 (expr -> expr GE expr .)
    EQ              reduce using rule 30 (expr -> expr GE expr .)
    NEQ             reduce using rule 30 (expr -> expr GE expr .)
    LT              reduce using rule 30 (expr -> expr GE expr .)
    GT              reduce using rule 30 (expr -> expr GE expr .)
    LE              reduce using rule 30 (expr -> expr GE expr .)
    GE              reduce using rule 30 (expr -> expr GE expr .)
    AND             reduce using rule 30 (expr -> expr GE expr .)
    OR              reduce using rule 30 (expr -> expr GE expr .)
    RPAREN          reduce using rule 30 (expr -> expr GE expr .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39

  ! PLUS            [ reduce using rule 30 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 30 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 30 (expr -> expr GE expr .) ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! AND             [ shift and go to state 46 ]
  ! OR              [ shift and go to state 47 ]


state 66

    (31) expr -> expr AND expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 31 (expr -> expr AND expr .)
    AND             reduce using rule 31 (expr -> expr AND expr .)
    OR              reduce using rule 31 (expr -> expr AND expr .)
    RPAREN          reduce using rule 31 (expr -> expr AND expr .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45

  ! PLUS            [ reduce using rule 31 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 31 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 31 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 31 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 31 (expr -> expr AND expr .) ]
  ! NEQ             [ reduce using rule 31 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 31 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 31 (expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 31 (expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 31 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 46 ]
  ! OR              [ shift and go to state 47 ]


state 67

    (32) expr -> expr OR expr .
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    SEMICOLON       reduce using rule 32 (expr -> expr OR expr .)
    OR              reduce using rule 32 (expr -> expr OR expr .)
    RPAREN          reduce using rule 32 (expr -> expr OR expr .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    AND             shift and go to state 46

  ! PLUS            [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! NEQ             [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 47 ]


state 68

    (33) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    NEQ             reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 33 (expr -> LPAREN expr RPAREN .)


state 69

    (5) stmt -> IF LPAREN expr RPAREN stmt .
    (6) stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt

    ID              reduce using rule 5 (stmt -> IF LPAREN expr RPAREN stmt .)
    IF              reduce using rule 5 (stmt -> IF LPAREN expr RPAREN stmt .)
    TYPE            reduce using rule 5 (stmt -> IF LPAREN expr RPAREN stmt .)
    SWITCH          reduce using rule 5 (stmt -> IF LPAREN expr RPAREN stmt .)
    BREAK           reduce using rule 5 (stmt -> IF LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 5 (stmt -> IF LPAREN expr RPAREN stmt .)
    DO              reduce using rule 5 (stmt -> IF LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 5 (stmt -> IF LPAREN expr RPAREN stmt .)
    PRINT           reduce using rule 5 (stmt -> IF LPAREN expr RPAREN stmt .)
    $end            reduce using rule 5 (stmt -> IF LPAREN expr RPAREN stmt .)
    RBRACE          reduce using rule 5 (stmt -> IF LPAREN expr RPAREN stmt .)
    ELSE            shift and go to state 75

  ! ELSE            [ reduce using rule 5 (stmt -> IF LPAREN expr RPAREN stmt .) ]


state 70

    (7) stmt -> TYPE ID ASSIGN expr SEMICOLON .

    ID              reduce using rule 7 (stmt -> TYPE ID ASSIGN expr SEMICOLON .)
    IF              reduce using rule 7 (stmt -> TYPE ID ASSIGN expr SEMICOLON .)
    TYPE            reduce using rule 7 (stmt -> TYPE ID ASSIGN expr SEMICOLON .)
    SWITCH          reduce using rule 7 (stmt -> TYPE ID ASSIGN expr SEMICOLON .)
    BREAK           reduce using rule 7 (stmt -> TYPE ID ASSIGN expr SEMICOLON .)
    WHILE           reduce using rule 7 (stmt -> TYPE ID ASSIGN expr SEMICOLON .)
    DO              reduce using rule 7 (stmt -> TYPE ID ASSIGN expr SEMICOLON .)
    LBRACE          reduce using rule 7 (stmt -> TYPE ID ASSIGN expr SEMICOLON .)
    PRINT           reduce using rule 7 (stmt -> TYPE ID ASSIGN expr SEMICOLON .)
    $end            reduce using rule 7 (stmt -> TYPE ID ASSIGN expr SEMICOLON .)
    RBRACE          reduce using rule 7 (stmt -> TYPE ID ASSIGN expr SEMICOLON .)
    ELSE            reduce using rule 7 (stmt -> TYPE ID ASSIGN expr SEMICOLON .)


state 71

    (8) stmt -> SWITCH LPAREN expr RPAREN LBRACE . case_list default_clause RBRACE
    (9) case_list -> . case_list case
    (10) case_list -> . empty
    (15) empty -> .

    DEFAULT         reduce using rule 15 (empty -> .)
    CASE            reduce using rule 15 (empty -> .)
    RBRACE          reduce using rule 15 (empty -> .)

    case_list                      shift and go to state 76
    empty                          shift and go to state 77

state 72

    (16) stmt -> WHILE LPAREN expr RPAREN stmt .

    ID              reduce using rule 16 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IF              reduce using rule 16 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    TYPE            reduce using rule 16 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    SWITCH          reduce using rule 16 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    BREAK           reduce using rule 16 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 16 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    DO              reduce using rule 16 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 16 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    PRINT           reduce using rule 16 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    $end            reduce using rule 16 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RBRACE          reduce using rule 16 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 16 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 73

    (17) stmt -> DO stmt WHILE LPAREN expr . RPAREN SEMICOLON
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . TIMES expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . MOD expr
    (25) expr -> expr . EQ expr
    (26) expr -> expr . NEQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . GT expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . AND expr
    (32) expr -> expr . OR expr

    RPAREN          shift and go to state 78
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47


state 74

    (19) stmt -> PRINT LPAREN expr RPAREN SEMICOLON .

    ID              reduce using rule 19 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    IF              reduce using rule 19 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    TYPE            reduce using rule 19 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    SWITCH          reduce using rule 19 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    BREAK           reduce using rule 19 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    WHILE           reduce using rule 19 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    DO              reduce using rule 19 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    LBRACE          reduce using rule 19 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    PRINT           reduce using rule 19 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    $end            reduce using rule 19 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    RBRACE          reduce using rule 19 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    ELSE            reduce using rule 19 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)


state 75

    (6) stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt
    (4) stmt -> . ID ASSIGN expr SEMICOLON
    (5) stmt -> . IF LPAREN expr RPAREN stmt
    (6) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (7) stmt -> . TYPE ID ASSIGN expr SEMICOLON
    (8) stmt -> . SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
    (14) stmt -> . BREAK SEMICOLON
    (16) stmt -> . WHILE LPAREN expr RPAREN stmt
    (17) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMICOLON
    (18) stmt -> . LBRACE stmt_list RBRACE
    (19) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON

    ID              shift and go to state 4
    IF              shift and go to state 5
    TYPE            shift and go to state 6
    SWITCH          shift and go to state 7
    BREAK           shift and go to state 9
    WHILE           shift and go to state 10
    DO              shift and go to state 11
    LBRACE          shift and go to state 8
    PRINT           shift and go to state 12

    stmt                           shift and go to state 79

state 76

    (8) stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list . default_clause RBRACE
    (9) case_list -> case_list . case
    (12) default_clause -> . DEFAULT COLON stmt_list
    (13) default_clause -> . empty
    (11) case -> . CASE NUMBER COLON stmt_list BREAK SEMICOLON
    (15) empty -> .

    DEFAULT         shift and go to state 82
    CASE            shift and go to state 84
    RBRACE          reduce using rule 15 (empty -> .)

    default_clause                 shift and go to state 80
    case                           shift and go to state 81
    empty                          shift and go to state 83

state 77

    (10) case_list -> empty .

    DEFAULT         reduce using rule 10 (case_list -> empty .)
    CASE            reduce using rule 10 (case_list -> empty .)
    RBRACE          reduce using rule 10 (case_list -> empty .)


state 78

    (17) stmt -> DO stmt WHILE LPAREN expr RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 85


state 79

    (6) stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .

    ID              reduce using rule 6 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    IF              reduce using rule 6 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    TYPE            reduce using rule 6 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    SWITCH          reduce using rule 6 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    BREAK           reduce using rule 6 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    WHILE           reduce using rule 6 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    DO              reduce using rule 6 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LBRACE          reduce using rule 6 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    PRINT           reduce using rule 6 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    $end            reduce using rule 6 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    RBRACE          reduce using rule 6 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 6 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)


state 80

    (8) stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause . RBRACE

    RBRACE          shift and go to state 86


state 81

    (9) case_list -> case_list case .

    DEFAULT         reduce using rule 9 (case_list -> case_list case .)
    CASE            reduce using rule 9 (case_list -> case_list case .)
    RBRACE          reduce using rule 9 (case_list -> case_list case .)


state 82

    (12) default_clause -> DEFAULT . COLON stmt_list

    COLON           shift and go to state 87


state 83

    (13) default_clause -> empty .

    RBRACE          reduce using rule 13 (default_clause -> empty .)


state 84

    (11) case -> CASE . NUMBER COLON stmt_list BREAK SEMICOLON

    NUMBER          shift and go to state 88


state 85

    (17) stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .

    ID              reduce using rule 17 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .)
    IF              reduce using rule 17 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .)
    TYPE            reduce using rule 17 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .)
    SWITCH          reduce using rule 17 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .)
    BREAK           reduce using rule 17 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .)
    WHILE           reduce using rule 17 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .)
    DO              reduce using rule 17 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .)
    LBRACE          reduce using rule 17 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .)
    PRINT           reduce using rule 17 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .)
    $end            reduce using rule 17 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .)
    RBRACE          reduce using rule 17 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .)
    ELSE            reduce using rule 17 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON .)


state 86

    (8) stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .

    ID              reduce using rule 8 (stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .)
    IF              reduce using rule 8 (stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .)
    TYPE            reduce using rule 8 (stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .)
    SWITCH          reduce using rule 8 (stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .)
    BREAK           reduce using rule 8 (stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .)
    WHILE           reduce using rule 8 (stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .)
    DO              reduce using rule 8 (stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .)
    LBRACE          reduce using rule 8 (stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .)
    PRINT           reduce using rule 8 (stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .)
    $end            reduce using rule 8 (stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .)
    RBRACE          reduce using rule 8 (stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .)
    ELSE            reduce using rule 8 (stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE .)


state 87

    (12) default_clause -> DEFAULT COLON . stmt_list
    (2) stmt_list -> . stmt_list stmt
    (3) stmt_list -> . stmt
    (4) stmt -> . ID ASSIGN expr SEMICOLON
    (5) stmt -> . IF LPAREN expr RPAREN stmt
    (6) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (7) stmt -> . TYPE ID ASSIGN expr SEMICOLON
    (8) stmt -> . SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
    (14) stmt -> . BREAK SEMICOLON
    (16) stmt -> . WHILE LPAREN expr RPAREN stmt
    (17) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMICOLON
    (18) stmt -> . LBRACE stmt_list RBRACE
    (19) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON

    ID              shift and go to state 4
    IF              shift and go to state 5
    TYPE            shift and go to state 6
    SWITCH          shift and go to state 7
    BREAK           shift and go to state 9
    WHILE           shift and go to state 10
    DO              shift and go to state 11
    LBRACE          shift and go to state 8
    PRINT           shift and go to state 12

    stmt_list                      shift and go to state 89
    stmt                           shift and go to state 3

state 88

    (11) case -> CASE NUMBER . COLON stmt_list BREAK SEMICOLON

    COLON           shift and go to state 90


state 89

    (12) default_clause -> DEFAULT COLON stmt_list .
    (2) stmt_list -> stmt_list . stmt
    (4) stmt -> . ID ASSIGN expr SEMICOLON
    (5) stmt -> . IF LPAREN expr RPAREN stmt
    (6) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (7) stmt -> . TYPE ID ASSIGN expr SEMICOLON
    (8) stmt -> . SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
    (14) stmt -> . BREAK SEMICOLON
    (16) stmt -> . WHILE LPAREN expr RPAREN stmt
    (17) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMICOLON
    (18) stmt -> . LBRACE stmt_list RBRACE
    (19) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON

    RBRACE          reduce using rule 12 (default_clause -> DEFAULT COLON stmt_list .)
    ID              shift and go to state 4
    IF              shift and go to state 5
    TYPE            shift and go to state 6
    SWITCH          shift and go to state 7
    BREAK           shift and go to state 9
    WHILE           shift and go to state 10
    DO              shift and go to state 11
    LBRACE          shift and go to state 8
    PRINT           shift and go to state 12

    stmt                           shift and go to state 13

state 90

    (11) case -> CASE NUMBER COLON . stmt_list BREAK SEMICOLON
    (2) stmt_list -> . stmt_list stmt
    (3) stmt_list -> . stmt
    (4) stmt -> . ID ASSIGN expr SEMICOLON
    (5) stmt -> . IF LPAREN expr RPAREN stmt
    (6) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (7) stmt -> . TYPE ID ASSIGN expr SEMICOLON
    (8) stmt -> . SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
    (14) stmt -> . BREAK SEMICOLON
    (16) stmt -> . WHILE LPAREN expr RPAREN stmt
    (17) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMICOLON
    (18) stmt -> . LBRACE stmt_list RBRACE
    (19) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON

    ID              shift and go to state 4
    IF              shift and go to state 5
    TYPE            shift and go to state 6
    SWITCH          shift and go to state 7
    BREAK           shift and go to state 9
    WHILE           shift and go to state 10
    DO              shift and go to state 11
    LBRACE          shift and go to state 8
    PRINT           shift and go to state 12

    stmt_list                      shift and go to state 91
    stmt                           shift and go to state 3

state 91

    (11) case -> CASE NUMBER COLON stmt_list . BREAK SEMICOLON
    (2) stmt_list -> stmt_list . stmt
    (4) stmt -> . ID ASSIGN expr SEMICOLON
    (5) stmt -> . IF LPAREN expr RPAREN stmt
    (6) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (7) stmt -> . TYPE ID ASSIGN expr SEMICOLON
    (8) stmt -> . SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE
    (14) stmt -> . BREAK SEMICOLON
    (16) stmt -> . WHILE LPAREN expr RPAREN stmt
    (17) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMICOLON
    (18) stmt -> . LBRACE stmt_list RBRACE
    (19) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON

    BREAK           shift and go to state 92
    ID              shift and go to state 4
    IF              shift and go to state 5
    TYPE            shift and go to state 6
    SWITCH          shift and go to state 7
    WHILE           shift and go to state 10
    DO              shift and go to state 11
    LBRACE          shift and go to state 8
    PRINT           shift and go to state 12

    stmt                           shift and go to state 13

state 92

    (11) case -> CASE NUMBER COLON stmt_list BREAK . SEMICOLON
    (14) stmt -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 93


state 93

    (11) case -> CASE NUMBER COLON stmt_list BREAK SEMICOLON .
    (14) stmt -> BREAK SEMICOLON .

    DEFAULT         reduce using rule 11 (case -> CASE NUMBER COLON stmt_list BREAK SEMICOLON .)
    CASE            reduce using rule 11 (case -> CASE NUMBER COLON stmt_list BREAK SEMICOLON .)
    RBRACE          reduce using rule 11 (case -> CASE NUMBER COLON stmt_list BREAK SEMICOLON .)
    BREAK           reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    ID              reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    IF              reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    TYPE            reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    WHILE           reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    DO              reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 14 (stmt -> BREAK SEMICOLON .)
    PRINT           reduce using rule 14 (stmt -> BREAK SEMICOLON .)

