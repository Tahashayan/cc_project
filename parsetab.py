
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEleftORleftANDleftEQNEQleftLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEMODAND ASSIGN BREAK CASE COLON DEFAULT DIVIDE DO ELSE EQ GE GT ID IF LBRACE LE LPAREN LT MINUS MOD NEQ NUMBER OR PLUS PRINT RBRACE RPAREN SEMICOLON SWITCH TIMES TYPE TYPE TYPE WHILEprogram : stmt_liststmt_list : stmt_list stmt\n                 | stmtstmt : ID ASSIGN expr SEMICOLONstmt : IF LPAREN expr RPAREN stmt %prec IFX\n            | IF LPAREN expr RPAREN stmt ELSE stmtstmt : TYPE ID ASSIGN expr SEMICOLONstmt : SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACEcase_list : case_list case\n                 | emptycase : CASE NUMBER COLON stmt_list BREAK SEMICOLONdefault_clause : DEFAULT COLON stmt_list\n                      | emptystmt : BREAK SEMICOLONempty :stmt : WHILE LPAREN expr RPAREN stmtstmt : DO stmt WHILE LPAREN expr RPAREN SEMICOLONstmt : LBRACE stmt_list RBRACEstmt : PRINT LPAREN expr RPAREN SEMICOLONexpr : expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE expr\n            | expr MOD expr\n            | expr EQ expr\n            | expr NEQ expr\n            | expr LT expr\n            | expr GT expr\n            | expr LE expr\n            | expr GE expr\n            | expr AND expr\n            | expr OR exprexpr : LPAREN expr RPARENexpr : NUMBERexpr : ID'
    
_lr_action_items = {'ID':([0,2,3,6,8,11,13,14,15,17,18,19,20,22,25,28,30,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,52,53,69,70,72,74,75,79,85,86,87,89,90,91,93,],[4,4,-3,16,4,4,-2,23,23,23,4,-14,23,23,23,23,-18,-4,23,23,23,23,23,23,23,23,23,23,23,23,23,4,4,23,-5,-7,-16,-19,4,-6,-17,-8,4,4,4,4,-14,]),'IF':([0,2,3,8,11,13,18,19,30,34,49,52,69,70,72,74,75,79,85,86,87,89,90,91,93,],[5,5,-3,5,5,-2,5,-14,-18,-4,5,5,-5,-7,-16,-19,5,-6,-17,-8,5,5,5,5,-14,]),'TYPE':([0,2,3,8,11,13,18,19,30,34,49,52,69,70,72,74,75,79,85,86,87,89,90,91,93,],[6,6,-3,6,6,-2,6,-14,-18,-4,6,6,-5,-7,-16,-19,6,-6,-17,-8,6,6,6,6,-14,]),'SWITCH':([0,2,3,8,11,13,18,19,30,34,49,52,69,70,72,74,75,79,85,86,87,89,90,91,93,],[7,7,-3,7,7,-2,7,-14,-18,-4,7,7,-5,-7,-16,-19,7,-6,-17,-8,7,7,7,7,-14,]),'BREAK':([0,2,3,8,11,13,18,19,30,34,49,52,69,70,72,74,75,79,85,86,87,89,90,91,93,],[9,9,-3,9,9,-2,9,-14,-18,-4,9,9,-5,-7,-16,-19,9,-6,-17,-8,9,9,9,92,-14,]),'WHILE':([0,2,3,8,11,13,18,19,21,30,34,49,52,69,70,72,74,75,79,85,86,87,89,90,91,93,],[10,10,-3,10,10,-2,10,-14,32,-18,-4,10,10,-5,-7,-16,-19,10,-6,-17,-8,10,10,10,10,-14,]),'DO':([0,2,3,8,11,13,18,19,30,34,49,52,69,70,72,74,75,79,85,86,87,89,90,91,93,],[11,11,-3,11,11,-2,11,-14,-18,-4,11,11,-5,-7,-16,-19,11,-6,-17,-8,11,11,11,11,-14,]),'LBRACE':([0,2,3,8,11,13,18,19,30,34,49,51,52,69,70,72,74,75,79,85,86,87,89,90,91,93,],[8,8,-3,8,8,-2,8,-14,-18,-4,8,71,8,-5,-7,-16,-19,8,-6,-17,-8,8,8,8,8,-14,]),'PRINT':([0,2,3,8,11,13,18,19,30,34,49,52,69,70,72,74,75,79,85,86,87,89,90,91,93,],[12,12,-3,12,12,-2,12,-14,-18,-4,12,12,-5,-7,-16,-19,12,-6,-17,-8,12,12,12,12,-14,]),'$end':([1,2,3,13,19,30,34,69,70,72,74,79,85,86,],[0,-1,-3,-2,-14,-18,-4,-5,-7,-16,-19,-6,-17,-8,]),'RBRACE':([3,13,18,19,30,34,69,70,71,72,74,76,77,79,80,81,83,85,86,89,93,],[-3,-2,30,-14,-18,-4,-5,-7,-15,-16,-19,-15,-10,-6,86,-9,-13,-17,-8,-12,-11,]),'ASSIGN':([4,16,],[14,28,]),'LPAREN':([5,7,10,12,14,15,17,20,22,25,28,32,35,36,37,38,39,40,41,42,43,44,45,46,47,53,],[15,17,20,22,25,25,25,25,25,25,25,53,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'SEMICOLON':([9,23,24,26,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,92,],[19,-35,34,-34,70,74,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,85,93,]),'NUMBER':([14,15,17,20,22,25,28,35,36,37,38,39,40,41,42,43,44,45,46,47,53,84,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,88,]),'ELSE':([19,30,34,69,70,72,74,79,85,86,],[-14,-18,-4,75,-7,-16,-19,-6,-17,-8,]),'PLUS':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,35,-34,35,35,35,35,35,35,-20,-21,-22,-23,-24,35,35,35,35,35,35,35,35,-33,35,]),'MINUS':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,36,-34,36,36,36,36,36,36,-20,-21,-22,-23,-24,36,36,36,36,36,36,36,36,-33,36,]),'TIMES':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,37,-34,37,37,37,37,37,37,37,37,-22,-23,-24,37,37,37,37,37,37,37,37,-33,37,]),'DIVIDE':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,38,-34,38,38,38,38,38,38,38,38,-22,-23,-24,38,38,38,38,38,38,38,38,-33,38,]),'MOD':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,39,-34,39,39,39,39,39,39,39,39,-22,-23,-24,39,39,39,39,39,39,39,39,-33,39,]),'EQ':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,40,-34,40,40,40,40,40,40,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,40,40,-33,40,]),'NEQ':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,41,-34,41,41,41,41,41,41,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,41,41,-33,41,]),'LT':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,42,-34,42,42,42,42,42,42,-20,-21,-22,-23,-24,42,42,-27,-28,-29,-30,42,42,-33,42,]),'GT':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,43,-34,43,43,43,43,43,43,-20,-21,-22,-23,-24,43,43,-27,-28,-29,-30,43,43,-33,43,]),'LE':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,44,-34,44,44,44,44,44,44,-20,-21,-22,-23,-24,44,44,-27,-28,-29,-30,44,44,-33,44,]),'GE':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,45,-34,45,45,45,45,45,45,-20,-21,-22,-23,-24,45,45,-27,-28,-29,-30,45,45,-33,45,]),'AND':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,46,-34,46,46,46,46,46,46,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,46,-33,46,]),'OR':([23,24,26,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,47,-34,47,47,47,47,47,47,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,47,]),'RPAREN':([23,26,27,29,31,33,48,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,],[-35,-34,49,51,52,54,68,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,78,]),'DEFAULT':([71,76,77,81,93,],[-15,82,-10,-9,-11,]),'CASE':([71,76,77,81,93,],[-15,84,-10,-9,-11,]),'COLON':([82,88,],[87,90,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,8,87,90,],[2,18,89,91,]),'stmt':([0,2,8,11,18,49,52,75,87,89,90,91,],[3,13,3,21,13,69,72,79,3,13,3,13,]),'expr':([14,15,17,20,22,25,28,35,36,37,38,39,40,41,42,43,44,45,46,47,53,],[24,27,29,31,33,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,73,]),'case_list':([71,],[76,]),'empty':([71,76,],[77,83,]),'default_clause':([76,],[80,]),'case':([76,],[81,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',9),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','parser.py',13),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',14),
  ('stmt -> ID ASSIGN expr SEMICOLON','stmt',4,'p_stmt_assign','parser.py',23),
  ('stmt -> IF LPAREN expr RPAREN stmt','stmt',5,'p_stmt_if','parser.py',27),
  ('stmt -> IF LPAREN expr RPAREN stmt ELSE stmt','stmt',7,'p_stmt_if','parser.py',28),
  ('stmt -> TYPE ID ASSIGN expr SEMICOLON','stmt',5,'p_stmt_declare_assign','parser.py',35),
  ('stmt -> SWITCH LPAREN expr RPAREN LBRACE case_list default_clause RBRACE','stmt',8,'p_stmt_switch','parser.py',39),
  ('case_list -> case_list case','case_list',2,'p_case_list','parser.py',43),
  ('case_list -> empty','case_list',1,'p_case_list','parser.py',44),
  ('case -> CASE NUMBER COLON stmt_list BREAK SEMICOLON','case',6,'p_case','parser.py',51),
  ('default_clause -> DEFAULT COLON stmt_list','default_clause',3,'p_default_clause','parser.py',55),
  ('default_clause -> empty','default_clause',1,'p_default_clause','parser.py',56),
  ('stmt -> BREAK SEMICOLON','stmt',2,'p_stmt_break','parser.py',63),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',67),
  ('stmt -> WHILE LPAREN expr RPAREN stmt','stmt',5,'p_stmt_while','parser.py',72),
  ('stmt -> DO stmt WHILE LPAREN expr RPAREN SEMICOLON','stmt',7,'p_stmt_do_while','parser.py',76),
  ('stmt -> LBRACE stmt_list RBRACE','stmt',3,'p_stmt_block','parser.py',80),
  ('stmt -> PRINT LPAREN expr RPAREN SEMICOLON','stmt',5,'p_stmt_print','parser.py',84),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binop','parser.py',90),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binop','parser.py',91),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binop','parser.py',92),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binop','parser.py',93),
  ('expr -> expr MOD expr','expr',3,'p_expr_binop','parser.py',94),
  ('expr -> expr EQ expr','expr',3,'p_expr_binop','parser.py',95),
  ('expr -> expr NEQ expr','expr',3,'p_expr_binop','parser.py',96),
  ('expr -> expr LT expr','expr',3,'p_expr_binop','parser.py',97),
  ('expr -> expr GT expr','expr',3,'p_expr_binop','parser.py',98),
  ('expr -> expr LE expr','expr',3,'p_expr_binop','parser.py',99),
  ('expr -> expr GE expr','expr',3,'p_expr_binop','parser.py',100),
  ('expr -> expr AND expr','expr',3,'p_expr_binop','parser.py',101),
  ('expr -> expr OR expr','expr',3,'p_expr_binop','parser.py',102),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_group','parser.py',106),
  ('expr -> NUMBER','expr',1,'p_expr_number','parser.py',110),
  ('expr -> ID','expr',1,'p_expr_id','parser.py',114),
]
